#!/bin/bash

#
#-----------------------------------------------------------------------
#
# This script generates NetCDF lateral boundary condition (LBC) files 
# that contain data for the halo region of a regional grid.  One file is
# generated for each lateral boundary update time -- not including the 
# initial (i.e. model start) time -- up to the end of the model run.  
# For example, if the lateral boundary fields are to be updated every 3
# hours (this update interval is determined by the variable LBC_UPDATE_-
# INTVL_HRS) and the FV3SAR forecast is to run for 24 hours (the fore-
# cast length is determined by the variable fcst_len_hrs), then a file 
# is generated for each of the forecast hours 3, 6, 9, 12, 15, 18, and
# 24 (but not hour 0 since that is handled by the script that generates 
# the initial conditions file).  All the generated NetCDF LBC files are
# placed in the directory WORKDIR_ICSLBCS_CDATE, defined as
#
#   WORKDIR_ICSLBCS_CDATE="$WORKDIR_ICSLBCS/$CDATE"
#
# where CDATE is the externally specified starting date and hour-of-day
# of the current FV3SAR cycle.
#
#-----------------------------------------------------------------------
#

#
#-----------------------------------------------------------------------
#
# Source the variable definitions script and the function definitions
# file.
#
#-----------------------------------------------------------------------
#
. $SCRIPT_VAR_DEFNS_FP
. $USHDIR/source_funcs.sh
#
#-----------------------------------------------------------------------
#
# Source the file defining the function that will be used to set various
# external-model-related variables.
#
#-----------------------------------------------------------------------
#
. $USHDIR/get_extrn_mdl_file_dir_info.sh
#
#-----------------------------------------------------------------------
#
# Save current shell options (in a global array).  Then set new options
# for this script/function.
#
#-----------------------------------------------------------------------
#
{ save_shell_opts; set -u +x; } > /dev/null 2>&1
#
#-----------------------------------------------------------------------
#
# Set the script name and print out an informational message informing
# the user that we've entered this script.
#
#-----------------------------------------------------------------------
#
script_name=$( basename "$0" )
print_info_msg "\n\
========================================================================
Entering script:  \"${script_name}\"
This is the J-job script for the task that generates lateral boundary 
condition (LBC) files (in NetCDF format) for all LBC update hours (ex-
cept hour zero). 
========================================================================"
#
#-----------------------------------------------------------------------
#
# Set the name of and create the directory in which the output from this
# script will be placed (if it doesn't already exist).
#
#-----------------------------------------------------------------------
#
WORKDIR_ICSLBCS_CDATE="$WORKDIR_ICSLBCS/$CDATE"
WORKDIR_ICSLBCS_CDATE_LBCS_WORK="$WORKDIR_ICSLBCS_CDATE/LBCS_work"
mkdir_vrfy -p "$WORKDIR_ICSLBCS_CDATE_LBCS_WORK"
cd_vrfy ${WORKDIR_ICSLBCS_CDATE_LBCS_WORK}
#
#-----------------------------------------------------------------------
#
# Load modules and set machine-dependent parameters.
#
#-----------------------------------------------------------------------
#
case "$MACHINE" in
#
"WCOSS_C")
#
  { save_shell_opts; set +x; } > /dev/null 2>&1

  { restore_shell_opts; } > /dev/null 2>&1
  ;;
#
"WCOSS")
#
  { save_shell_opts; set +x; } > /dev/null 2>&1

  { restore_shell_opts; } > /dev/null 2>&1
  ;;
#
"DELL")
#
  { save_shell_opts; set +x; } > /dev/null 2>&1

  { restore_shell_opts; } > /dev/null 2>&1
  ;;
#
"THEIA")
#
  { save_shell_opts; set +x; } > /dev/null 2>&1

  ulimit -s unlimited
#  ulimit -a

  module purge
  module load intel/18.1.163
  module load impi/5.1.1.109
  module load netcdf/4.3.0
  module load hdf5/1.8.14
  module load wgrib2/2.0.8
  module load contrib wrap-mpi
  module list

  np=${SLURM_NTASKS}
  APRUN="mpirun -np ${np}"

  { restore_shell_opts; } > /dev/null 2>&1
  ;;
#
"JET")
#
  { save_shell_opts; set +x; } > /dev/null 2>&1

  { restore_shell_opts; } > /dev/null 2>&1
  ;;
#
"ODIN")
#
  ;;
#
"CHEYENNE")
#
  ;;
#
esac
#
#-----------------------------------------------------------------------
#
# Call the function that sets various external-model-related variables.
# See the function defintion file for the definitions of these varia-
# bles.
#
#-----------------------------------------------------------------------
#
get_extrn_mdl_file_dir_info \
  extrn_mdl_name="${EXTRN_MDL_NAME_LBCS}" \
  anl_or_fcst="FCST" \
  cdate_FV3SAR="${CDATE}" \
  time_offset_hrs="${EXTRN_MDL_LBCS_OFFSET_HRS}" \
  varname_extrn_mdl_cdate="EXTRN_MDL_CDATE" \
  varname_extrn_mdl_lbc_update_fhrs="EXTRN_MDL_LBC_UPDATE_FHRS" \
  varname_extrn_mdl_fns="EXTRN_MDL_FNS" \
  varname_extrn_mdl_sysdir="EXTRN_MDL_SYSDIR" \
  varname_extrn_mdl_arcv_fmt="EXTRN_MDL_ARCV_FMT" \
  varname_extrn_mdl_arcv_fns="EXTRN_MDL_ARCV_FNS" \
  varname_extrn_mdl_arcv_fps="EXTRN_MDL_ARCV_FPS" \
  varname_extrn_mdl_arcvrel_dir="EXTRN_MDL_ARCVREL_DIR"
#
#-----------------------------------------------------------------------
#
# Find the directory in which the wgrib2 executable is located.
#
#-----------------------------------------------------------------------
#
WGRIB2_DIR=$( which wgrib2 ) || print_err_msg_exit "${script_name}" "\
Directory in which the wgrib2 executable is located not found:
  WGRIB2_DIR = \"${WGRIB2_DIR}\"
"
#
#-----------------------------------------------------------------------
#
# Set the directory containing the external model output files.
#
#-----------------------------------------------------------------------
#
EXTRN_MDL_FILES_DIR="${EXTRN_MDL_FILES_BASEDIR_LBCS}/${CDATE}"
#
#-----------------------------------------------------------------------
#
# Call the ex-script for this J-job and pass to it the necessary varia-
# bles.
#
#-----------------------------------------------------------------------
#
EXTRN_MDL_FNS_str="( "$( printf "\"%s\" " "${EXTRN_MDL_FNS[@]}" )")"
EXTRN_MDL_LBC_UPDATE_FHRS_str="( "$( printf "\"%s\" " "${EXTRN_MDL_LBC_UPDATE_FHRS[@]}" )")"

$SCRIPTSDIR/exregional_make_lbc1_to_lbcn.sh \
  EXTRN_MDL_FNS="${EXTRN_MDL_FNS_str}" \
  EXTRN_MDL_FILES_DIR="${EXTRN_MDL_FILES_DIR}" \
  EXTRN_MDL_CDATE="${EXTRN_MDL_CDATE}" \
  WGRIB2_DIR="${WGRIB2_DIR}" \
  APRUN="${APRUN}" \
  WORKDIR_ICSLBCS_CDATE="${WORKDIR_ICSLBCS_CDATE}" \
  EXTRN_MDL_LBC_UPDATE_FHRS="${EXTRN_MDL_LBC_UPDATE_FHRS_str}" \
  || print_err_msg_exit "${script_name}" "\
Call to ex-script corresponding to J-job \"${script_name}\" failed."
#
#-----------------------------------------------------------------------
#
# Print exit message.
#
#-----------------------------------------------------------------------
#
print_info_msg "\n\
========================================================================
Exiting script:  \"${script_name}\"
========================================================================"
#
#-----------------------------------------------------------------------
#
# Restore the shell options saved at the beginning of this script/func-
# tion.
#
#-----------------------------------------------------------------------
#
{ restore_shell_opts; } > /dev/null 2>&1

