#!/bin/bash

#
#-----------------------------------------------------------------------
#
# This script copies files from various directories into the experiment
# directory, creates links to some of them, and modifies others (e.g. 
# templates) to customize them for the current experiment setup.
#
#-----------------------------------------------------------------------
#

#
#-----------------------------------------------------------------------
#
# Source the variable definitions script and the function definitions
# file.
#
#-----------------------------------------------------------------------
#
. $SCRIPT_VAR_DEFNS_FP
. $USHDIR/source_funcs.sh
#
#-----------------------------------------------------------------------
#
# Save current shell options (in a global array).  Then set new options
# for this script/function.
#
#-----------------------------------------------------------------------
#
{ save_shell_opts; set -u -x; } > /dev/null 2>&1
#
#-----------------------------------------------------------------------
#
# Set the script name and print out an informational message informing
# the user that we've entered this script.
#
#-----------------------------------------------------------------------
#
script_name=$( basename "$0" )
print_info_msg "\n\
========================================================================
Entering script:  \"${script_name}\"
This is the J-job script for the task that runs a forecast with FV3 for 
the specified cycle.
========================================================================"
#
#-----------------------------------------------------------------------
#
# Set and create the run directory for the current cycle.  Then create
# the INPUT and RESTART subdirectories under it.
#
#-----------------------------------------------------------------------
#
if [ "${RUN_ENVIR}" = "nco" ]; then
  DOMAIN=${predef_domain}
  YYMMDDHH=...
  DATA="$STMP/tmpnwprd/regional_forecast_tm00_${DOMAIN}_${YYMMDDHH}"
  CYCLE_DIR=$DATA
else
  CYCLE_DIR="$EXPTDIR/$CDATE"
fi
#
#-----------------------------------------------------------------------
#
# Create directories as necessary.  Some may already exist.
#
#-----------------------------------------------------------------------
#
mkdir_vrfy -p ${CYCLE_DIR}/INPUT
mkdir_vrfy -p ${CYCLE_DIR}/RESTART
#
#-----------------------------------------------------------------------
#
# Change location to the INPUT subdirectory of the current cycle's run 
# directory.
#
#-----------------------------------------------------------------------
#
cd_vrfy ${CYCLE_DIR}/INPUT
#
#-----------------------------------------------------------------------
#
# Create links in the INPUT subdirectory of the current cycle's run di-
# rectory to the grid and (filtered) orography files.
#
#-----------------------------------------------------------------------
#
print_info_msg_verbose "\
Creating links in the INPUT subdirectory of the current cycle's run di-
rectory to the grid and (filtered) orography files ..."

filename="${CRES}_mosaic.nc"
ln_vrfy -sf -t ${CYCLE_DIR}/INPUT ../../INPUT/$filename
ln_vrfy -sf $filename grid_spec.nc

filename="${CRES}_grid.tile7.halo${nh3_T7}.nc"
ln_vrfy -sf -t ${CYCLE_DIR}/INPUT ../../INPUT/$filename
ln_vrfy -sf $filename ${CRES}_grid.tile7.nc

filename="${CRES}_grid.tile7.halo${nh4_T7}.nc"
ln_vrfy -sf -t ${CYCLE_DIR}/INPUT ../../INPUT/$filename
ln_vrfy -sf $filename grid.tile7.halo${nh4_T7}.nc

filename="${CRES}_oro_data.tile7.halo${nh4_T7}.nc"
ln_vrfy -sf -t ${CYCLE_DIR}/INPUT ../../INPUT/$filename
ln_vrfy -sf $filename oro_data.tile7.halo${nh4_T7}.nc

filename="${CRES}_oro_data.tile7.halo${nh0_T7}.nc"
ln_vrfy -sf -t ${CYCLE_DIR}/INPUT ../../INPUT/$filename
ln_vrfy -sf $filename oro_data.nc
#
#-----------------------------------------------------------------------
#
# The FV3 model looks for the following files in the INPUT subdirectory
# of the run directory:
#
#   gfs_data.nc
#   sfc_data.nc
#   gfs_bndy*.nc
#   gfs_ctrl.nc
#
# Some of these files (gfs_ctrl.nc, gfs_bndy*.nc) already exist, but 
# others do not.  Thus, create links with these names to the appropriate
# files (in this case the initial condition and surface files only).
#
#-----------------------------------------------------------------------
#
print_info_msg_verbose "\
Creating links with names that FV3 looks for in the INPUT subdirectory
of the current cycle's run directory (CYCLE_DIR)..."

ln_vrfy -sf gfs_data.tile7.nc gfs_data.nc
ln_vrfy -sf sfc_data.tile7.nc sfc_data.nc
#
#-----------------------------------------------------------------------
#
# Create links in the current cycle's run directory to "fix" files in 
# the main experiment directory.
#
#-----------------------------------------------------------------------
#
cd_vrfy ${CYCLE_DIR}

print_info_msg_verbose "\
Creating links in the current cycle's run directory to static (fix) 
files in the main experiment directory..."

ln_vrfy -sf -t ${CYCLE_DIR} ../CFSR.SEAICE.1982.2012.monthly.clim.grb
ln_vrfy -sf -t ${CYCLE_DIR} ../RTGSST.1982.2012.monthly.clim.grb
ln_vrfy -sf -t ${CYCLE_DIR} ../seaice_newland.grb
ln_vrfy -sf -t ${CYCLE_DIR} ../aerosol.dat
ln_vrfy -sf -t ${CYCLE_DIR} ../global_albedo4.1x1.grb
ln_vrfy -sf -t ${CYCLE_DIR} ../global_glacier.2x2.grb
ln_vrfy -sf -t ${CYCLE_DIR} ../global_h2oprdlos.f77
ln_vrfy -sf -t ${CYCLE_DIR} ../global_maxice.2x2.grb
ln_vrfy -sf -t ${CYCLE_DIR} ../global_mxsnoalb.uariz.t126.384.190.rg.grb
ln_vrfy -sf -t ${CYCLE_DIR} ../global_o3prdlos.f77
ln_vrfy -sf -t ${CYCLE_DIR} ../global_shdmax.0.144x0.144.grb
ln_vrfy -sf -t ${CYCLE_DIR} ../global_shdmin.0.144x0.144.grb
ln_vrfy -sf -t ${CYCLE_DIR} ../global_slope.1x1.grb
ln_vrfy -sf -t ${CYCLE_DIR} ../global_snoclim.1.875.grb
ln_vrfy -sf -t ${CYCLE_DIR} ../global_snowfree_albedo.bosu.t126.384.190.rg.grb
ln_vrfy -sf -t ${CYCLE_DIR} ../global_soilmgldas.t126.384.190.grb
ln_vrfy -sf -t ${CYCLE_DIR} ../global_soiltype.statsgo.t126.384.190.rg.grb
ln_vrfy -sf -t ${CYCLE_DIR} ../global_tg3clim.2.6x1.5.grb
ln_vrfy -sf -t ${CYCLE_DIR} ../global_vegfrac.0.144.decpercent.grb
ln_vrfy -sf -t ${CYCLE_DIR} ../global_vegtype.igbp.t126.384.190.rg.grb
ln_vrfy -sf -t ${CYCLE_DIR} ../global_zorclim.1x1.grb
ln_vrfy -sf -t ${CYCLE_DIR} ../sfc_emissivity_idx.txt
ln_vrfy -sf -t ${CYCLE_DIR} ../solarconstant_noaa_an.txt
ln_vrfy -sf -t ${CYCLE_DIR} ../co2historicaldata_2010.txt
ln_vrfy -sf -t ${CYCLE_DIR} ../co2historicaldata_2011.txt
ln_vrfy -sf -t ${CYCLE_DIR} ../co2historicaldata_2012.txt
ln_vrfy -sf -t ${CYCLE_DIR} ../co2historicaldata_2013.txt
ln_vrfy -sf -t ${CYCLE_DIR} ../co2historicaldata_2014.txt
ln_vrfy -sf -t ${CYCLE_DIR} ../co2historicaldata_2015.txt
ln_vrfy -sf -t ${CYCLE_DIR} ../co2historicaldata_2016.txt
ln_vrfy -sf -t ${CYCLE_DIR} ../co2historicaldata_2017.txt
ln_vrfy -sf -t ${CYCLE_DIR} ../co2historicaldata_2018.txt
ln_vrfy -sf -t ${CYCLE_DIR} ../co2historicaldata_glob.txt
ln_vrfy -sf -t ${CYCLE_DIR} ../co2monthlycyc.txt
#
#-----------------------------------------------------------------------
#
# Create links in the current cycle's run directory to cycle-independent
# model input files in the main experiment directory.
#
#-----------------------------------------------------------------------
#

# Should these also be copied to the cycle's run directory from the templates directory (especially if they're not modified?

print_info_msg_verbose "\
Creating links in the current cycle's run directory to cycle-independent
model input files in the main experiment directory..."

ln_vrfy -sf -t ${CYCLE_DIR} ../${FV3_NML_FN}
ln_vrfy -sf -t ${CYCLE_DIR} ../${DATA_TABLE_FN}
ln_vrfy -sf -t ${CYCLE_DIR} ../${FIELD_TABLE_FN}
ln_vrfy -sf -t ${CYCLE_DIR} ../${NEMS_CONFIG_FN}

if [ "$CCPP" = "true" ]; then
  ln_vrfy -sf -t ${CYCLE_DIR} ../module-setup.sh
  ln_vrfy -sf -t ${CYCLE_DIR} ../modules.fv3
  if [ "$CCPP_phys_suite" = "GSD" ]; then
    ln_vrfy -sf -t ${CYCLE_DIR} ../suite_FV3_GSD_v0.xml
  elif [ "$CCPP_phys_suite" = "GFS" ]; then
    ln_vrfy -sf -t ${CYCLE_DIR} ../suite_FV3_GFS_2017_gfdlmp.xml
  fi
  if [ "$CCPP_phys_suite" = "GSD" ]; then
    ln_vrfy -sf -t ${CYCLE_DIR} ../CCN_ACTIVATE.BIN
  fi
fi
#
#-----------------------------------------------------------------------
#
# Copy cycle-independent model input files from the templates directory 
# to the current cycle's run directory.
#
#-----------------------------------------------------------------------
#

# If these are cycle-independent, why not copy them once to the main 
# experiment directory and then create links to them, as above???
print_info_msg_verbose "\
Copying cycle-independent model input files from the templates directory 
to the current cycle's run directory..." 

cp_vrfy ${TEMPLATE_DIR}/${MODEL_CONFIG_FN} ${CYCLE_DIR}

if [ "$CCPP" = "true" ]; then
  if [ "${CCPP_phys_suite}" = "GFS" ]; then
    cp_vrfy ${TEMPLATE_DIR}/${DIAG_TABLE_FN} ${CYCLE_DIR}
  elif [ "$CCPP_phys_suite" = "GSD" ]; then
    cp_vrfy ${TEMPLATE_DIR}/${DIAG_TABLE_CCPP_GSD_FN} ${CYCLE_DIR}/${DIAG_TABLE_FN}
  fi
elif [ "$CCPP" = "false" ]; then
  cp_vrfy ${TEMPLATE_DIR}/${DIAG_TABLE_FN} ${CYCLE_DIR}
fi
#
#-----------------------------------------------------------------------
#
# Call the ex-script for this J-job and pass to it the necessary varia-
# bles.
#
#-----------------------------------------------------------------------
#
$SCRIPTSDIR/exregional_run_fv3.sh \
  CYCLE_DIR="${CYCLE_DIR}" || \
  print_err_msg_exit "${script_name}" "\
Call to ex-script corresponding to J-job \"${script_name}\" failed."
#
#-----------------------------------------------------------------------
#
# Print exit message.
#
#-----------------------------------------------------------------------
#
print_info_msg "\n\
========================================================================
Exiting script:  \"${script_name}\"
========================================================================"
#
#-----------------------------------------------------------------------
#
# Restore the shell options saved at the beginning of this script/func-
# tion.
#
#-----------------------------------------------------------------------
#
{ restore_shell_opts; } > /dev/null 2>&1

