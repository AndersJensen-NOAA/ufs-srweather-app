#!/bin/bash

#
#-----------------------------------------------------------------------
#
# Source the variable definitions script and the function definitions
# file.
#
#-----------------------------------------------------------------------
#
. $SCRIPT_VAR_DEFNS_FP
. $USHDIR/source_funcs.sh
#
#-----------------------------------------------------------------------
#
# Save current shell options (in a global array).  Then set new options
# for this script/function.
#
#-----------------------------------------------------------------------
#
{ save_shell_opts; set -u +x; } > /dev/null 2>&1
#
#-----------------------------------------------------------------------
#
# Set the script name and print out an informational message informing
# the user that we've entered this script.
#
#-----------------------------------------------------------------------
#
script_name=$( basename "${BASH_SOURCE[0]}" )
print_info_msg "\n\
========================================================================
Entering script:  \"${script_name}\"
This is the J-job script for the task that generates surface fields from
climatology.
========================================================================"
#
#-----------------------------------------------------------------------
#
# Create the output directory for the surface climatology files.  If it
# already exists, deal with it as specified by the variable preexist-
# ing_dir_method.
#
#-----------------------------------------------------------------------
#
check_for_preexist_dir ${SFC_CLIMO_DIR} ${PREEXISTING_DIR_METHOD}
mkdir_vrfy -p "${SFC_CLIMO_DIR}"
#
#-----------------------------------------------------------------------
#
# Create a work directory.  If it already exists, delete it.
#
#-----------------------------------------------------------------------
#
workdir="${SFC_CLIMO_DIR}/tmp"
check_for_preexist_dir $workdir "delete"
mkdir_vrfy $workdir
#
#-----------------------------------------------------------------------
#
# Call the ex-script for this J-job and pass to it the necessary varia-
# bles.
#
#-----------------------------------------------------------------------
#
${SCRIPTSDIR}/exregional_make_sfc_climo.sh \
  workdir="$workdir" || \
  print_err_msg_exit "${script_name}" "\
Call to ex-script corresponding to J-job \"${script_name}\" failed."
#
#-----------------------------------------------------------------------
#
# Create a flag file to make rocoto aware that the make_sfc_climo task
# has successfully completed (so that other tasks that depend on it can
# be launched).  
#
# Although we can use the <taskdep> tag to make other tasks depend on 
# the successful completion of make_sfc_climo, it turns out that the 
# <taskdep> tag assumes that the task it specifies (in this case make_-
# sfc_climo) runs for the same set of cycles as the one in which it ap-
# pears as a dependency.  Thus, if we use <taskdep> in a cycle-dependent
# task in the workflow to make it depend on the make_sfc_climo, then the
# workflow will wait for make_sfc_climo to run for each cycle for which
# that cycle-dependent task is defined before running the task.  But 
# since make_sfc_climo will not run for each cycle (except possibly for
# the very first one), the cycle-dependent task will not be able to run
# for any of the cycles except the first one.  For this reason, we can-
# not use the <taskdep> tag to make other cycle-dependent tasks depend
# on make_sfc_climo and must instead use a flag file.
#
#-----------------------------------------------------------------------
#
touch "$LOGDIR/make_sfc_climo_task_complete.txt"
#
#-----------------------------------------------------------------------
#
# Print exit message.
#
#-----------------------------------------------------------------------
#
print_info_msg "\n\
========================================================================
Exiting script:  \"${script_name}\"
========================================================================"
#
#-----------------------------------------------------------------------
#
# Restore the shell options saved at the beginning of this script/func-
# tion.
#
#-----------------------------------------------------------------------
#
{ restore_shell_opts; } > /dev/null 2>&1

